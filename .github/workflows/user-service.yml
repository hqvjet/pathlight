name: CICD For User Service

on:
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'services/auth-service/**'

jobs:
  # Build Docker Image
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Build Docker Image
        run: |
          docker build -t pathlight/user_service services/user-service
          docker save pathlight/user_service -o user-service.tar
          echo "Docker image 'pathlight/user_service' built successfully."

      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-user-service
          path: user-service.tar

  # Run Tests
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: pip install -r services/user-service/requirements.txt

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Load Environment Variables
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> services/user-service/.env
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> services/user-service/.env
          echo "ACCESS_KEY_ID=${{ secrets.ACCESS_KEY_ID }}" >> services/user-service/.env
          echo "SECRET_ACCESS_KEY=${{ secrets.SECRET_ACCESS_KEY }}" >> services/user-service/.env
          echo "S3_USER_BUCKET_NAME=${{ secrets.S3_USER_BUCKET_NAME }}" >> services/user-service/.env

      - name: Run Tests
        run: |
          cd services/user-service
          echo "ðŸ§ª Running unit tests..."
          pytest -v
    
  # Push Image to ECR and Deploy to Lambda
  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Use Artifact from Build
        uses: actions/download-artifact@v4
        with:
          name: docker-user-service

      - name: Load Docker Image Artifact
        run: |
          docker load -i user-service.tar
          echo "Docker image 'pathlight/user_service' loaded successfully."

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Push User Service Image into AWS ECR
        run: |
          aws ecr get-login-password --region ap-northeast-1 | docker login --username AWS --password-stdin ${{ secrets.ACCOUNT_ID }}.dkr.ecr.ap-northeast-1.amazonaws.com
          docker tag pathlight/user_service:latest ${{ secrets.ACCOUNT_ID }}.dkr.ecr.ap-northeast-1.amazonaws.com/pathlight/user_service:latest
          docker push ${{ secrets.ACCOUNT_ID }}.dkr.ecr.ap-northeast-1.amazonaws.com/pathlight/user_service:latest
          echo "âœ… Docker image 'pathlight/user_service' pushed to ECR successfully."
          sleep 10 # Wait for ECR to process the image

      - name: Update Lambda Function Code from ECR
        run: |
          aws lambda update-function-code --function-name pathlight-user-service --image-uri ${{ secrets.ACCOUNT_ID }}.dkr.ecr.ap-northeast-1.amazonaws.com/pathlight/user_service:latest
          echo "âœ… Lambda function code updated successfully."

      - name: Update Lambda Environment Variables (Non-AWS secrets only)
        run: |
          sleep 20 # Wait for the Lambda function to be updated
          aws lambda update-function-configuration --function-name pathlight-user-service --environment \
          "Variables={DATABASE_URL=${{ secrets.DATABASE_URL }}, JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}, ACCESS_KEY_ID=${{ secrets.ACCESS_KEY_ID }}, SECRET_ACCESS_KEY=${{ secrets.SECRET_ACCESS_KEY }}, S3_USER_BUCKET_NAME=${{ secrets.S3_USER_BUCKET_NAME }}, USER_SERVICE_PORT=${{ secrets.USER_SERVICE_PORT }}}"
          echo "âœ… Lambda environment variables updated successfully."

      - name: Notify Deployment Success
        run: echo "Deployment of User Service completed successfully."