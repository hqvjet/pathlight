import sys
import os

# Add libs path to use common utilities
# For Docker: /app/libs/common-utils-py/src
# For local development: relative path
if os.path.exists('/app/libs/common-utils-py/src'):
    sys.path.insert(0, '/app/libs/common-utils-py/src')
    sys.path.insert(0, '/app/libs/common-types-py')
else:
    # Local development path
    current_dir = os.path.dirname(os.path.abspath(__file__))
    libs_path = os.path.join(current_dir, '..', '..', '..', 'libs', 'common-utils-py', 'src')
    types_path = os.path.join(current_dir, '..', '..', '..', 'libs', 'common-types-py')
    sys.path.insert(0, os.path.abspath(libs_path))
    sys.path.insert(0, os.path.abspath(types_path))

from fastapi import FastAPI, HTTPException, Depends, status, Response, Path
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, EmailStr, validator
from typing import Optional, Dict, Any
from sqlalchemy.orm import Session
import bcrypt
import jwt
from jose import JWTError, jwt as jose_jwt
import secrets
import time
from datetime import datetime, timedelta, timezone
import uuid
from datetime import datetime, timedelta
import logging
import re
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from pathlight_common import get_jwt_config, get_service_port
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
import atexit

# Load JWT configuration from common utilities
jwt_config = get_jwt_config()

from src.database import get_db, create_tables, SessionLocal
from src.models import User, Admin, TokenBlacklist
from src.email_reminders import send_email

# Import database URL
from pathlight_common import get_database_url
DATABASE_URL = get_database_url()

# Email verification configuration
EMAIL_VERIFICATION_EXPIRE_MINUTES = int(os.getenv("EMAIL_VERIFICATION_EXPIRE_MINUTES", "10"))

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(title="Auth Service", version="1.0.0")

# Load configuration from environment
JWT_SECRET_KEY = os.getenv("JWT_SECRET_KEY", "pathlight-super-secret-key-2025")
JWT_REFRESH_SECRET_KEY = os.getenv("JWT_REFRESH_SECRET_KEY", "pathlight-refresh-secret-key-2025")
JWT_ALGORITHM = os.getenv("JWT_ALGORITHM", "HS256")
JWT_ACCESS_TOKEN_EXPIRE_MINUTES = int(os.getenv("JWT_ACCESS_TOKEN_EXPIRE_MINUTES", "1440"))
JWT_REFRESH_TOKEN_EXPIRE_DAYS = int(os.getenv("JWT_REFRESH_TOKEN_EXPIRE_DAYS", "7"))

# CORS configuration
ALLOWED_ORIGINS = os.getenv("ALLOWED_ORIGINS", "*").split(",")
ALLOWED_METHODS = os.getenv("ALLOWED_METHODS", "GET,POST,PUT,DELETE,OPTIONS").split(",")
ALLOWED_HEADERS = os.getenv("ALLOWED_HEADERS", "*").split(",")

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=ALLOWED_ORIGINS,
    allow_credentials=True,
    allow_methods=ALLOWED_METHODS,
    allow_headers=ALLOWED_HEADERS,
)

# Email configuration
SMTP_SERVER = os.getenv("SMTP_SERVER", "smtp.gmail.com")
SMTP_PORT = int(os.getenv("SMTP_PORT", "587"))
SMTP_USERNAME = os.getenv("SMTP_USERNAME", "")
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD", "")
FROM_EMAIL = os.getenv("FROM_EMAIL", "noreply@pathlight.com")

# Frontend URL
FRONTEND_URL = os.getenv("FRONTEND_URL", "*")

# Background Scheduler for Study Reminders
scheduler = BackgroundScheduler()

def run_study_reminders():
    try:
        logger.info("[REMINDER DEBUG] Scheduler ƒë√£ g·ªçi run_study_reminders()")
        db = SessionLocal()
        from src.email_reminders import send_reminders_to_users
        result = send_reminders_to_users(db)
        logger.info(f"[REMINDER DEBUG] K·∫øt qu·∫£ g·ª≠i nh·∫Øc nh·ªü: {result}")
        db.close()
    except Exception as e:
        logger.error(f"[REMINDER DEBUG] L·ªói khi g·ª≠i nh·∫Øc nh·ªü: {str(e)}")

# Schedule study reminders every 1 minute (d·ªÖ test)
scheduler.add_job(
    func=run_study_reminders,
    trigger=CronTrigger(minute="*"),  # M·ªói ph√∫t ch·∫°y 1 l·∫ßn
    id='study_reminders',
    name='Send study reminder emails',
    replace_existing=True
)

# Start scheduler
scheduler.start()
logger.info("Background scheduler started for study reminders")

# Ensure scheduler shuts down when app stops
atexit.register(lambda: scheduler.shutdown())

# Security
security = HTTPBearer()

# Admin credentials
ADMIN_USERNAME = os.getenv("ADMIN_USERNAME", "admin")
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD", "admin123")

# Data Models
class SignupRequest(BaseModel):
    email: EmailStr
    password: str

class SigninRequest(BaseModel):
    email: EmailStr
    password: str

class ForgetPasswordRequest(BaseModel):
    email: EmailStr

class ResetPasswordRequest(BaseModel):
    new_password: str

class ChangePasswordRequest(BaseModel):
    password: str
    new_password: str

class OAuthSigninRequest(BaseModel):
    email: EmailStr
    google_id: str
    given_name: str
    family_name: Optional[str] = None
    avatar_id: str

class AdminSigninRequest(BaseModel):
    username: str
    password: str

class MessageResponse(BaseModel):
    status: int
    message: Optional[str] = None

class AuthResponse(BaseModel):
    status: int
    access_token: Optional[str] = None
    message: Optional[str] = None

class ResendVerificationRequest(BaseModel):
    email: EmailStr

class NotifyTimeRequest(BaseModel):
    remind_time: str
    
    @validator('remind_time')
    def validate_time_format(cls, v):
        # Validate HH:MM format
        if not re.match(r'^([01]?[0-9]|2[0-3]):[0-5][0-9]$', v):
            raise ValueError('Time must be in HH:MM format (e.g., "18:30")')
        return v

# Utility functions
def hash_password(password: str) -> str:
    return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')

def verify_password(password: str, hashed_password: str) -> bool:
    return bcrypt.checkpw(password.encode('utf-8'), hashed_password.encode('utf-8'))

def create_access_token(data: dict) -> str:
    to_encode = data.copy()
    now = datetime.now(timezone.utc)
    expire = now + timedelta(minutes=JWT_ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({
        "exp": int(expire.timestamp()),
        "type": "access",
        "iat": int(now.timestamp())
    })
    return jose_jwt.encode(to_encode, JWT_SECRET_KEY, algorithm=JWT_ALGORITHM)

def create_refresh_token(data: dict) -> str:
    to_encode = data.copy()
    now = datetime.now(timezone.utc)
    expire = now + timedelta(days=JWT_REFRESH_TOKEN_EXPIRE_DAYS)
    to_encode.update({
        "exp": int(expire.timestamp()),
        "type": "refresh", 
        "jti": str(uuid.uuid4()),
        "iat": int(now.timestamp())
    })
    return jose_jwt.encode(to_encode, JWT_SECRET_KEY, algorithm=JWT_ALGORITHM)

def generate_token() -> str:
    return secrets.token_urlsafe(32)

def send_email(to_email: str, subject: str, body: str):
    """Send email using SMTP with improved reliability"""
    try:
        logger.info(f"üîç DEBUG: Attempting to send email to {to_email}")
        logger.info(f"üîç DEBUG: SMTP_USERNAME={SMTP_USERNAME}")
        logger.info(f"üîç DEBUG: SMTP_PASSWORD={'*' * len(SMTP_PASSWORD) if SMTP_PASSWORD else 'EMPTY'}")
        logger.info(f"üîç DEBUG: FROM_EMAIL={FROM_EMAIL}")
        logger.info(f"üîç DEBUG: SMTP_SERVER={SMTP_SERVER}:{SMTP_PORT}")
        
        if not SMTP_USERNAME or not SMTP_PASSWORD:
            logger.warning("Email credentials not configured. Skipping email send.")
            return
            
        logger.info(f"üìß Creating email message...")
        msg = MIMEMultipart('alternative')
        msg['From'] = f"PathLight <{FROM_EMAIL}>"
        msg['To'] = to_email
        msg['Subject'] = subject
        msg['Message-ID'] = f"<{secrets.token_urlsafe(16)}@pathlight.com>"
        msg['Date'] = datetime.now().strftime('%a, %d %b %Y %H:%M:%S %z')
        msg['X-Mailer'] = 'PathLight App'
        
        # Add both HTML and plain text versions
        plain_body = body.replace('<br>', '\n').replace('<p>', '').replace('</p>', '\n')
        plain_body = plain_body.replace('<strong>', '').replace('</strong>', '')
        plain_body = plain_body.replace('<a href="', '').replace('">', ' ').replace('</a>', '')
        
        text_part = MIMEText(plain_body, 'plain', 'utf-8')
        html_part = MIMEText(body, 'html', 'utf-8')
        
        msg.attach(text_part)
        msg.attach(html_part)
        
        # Try sending with retry mechanism
        max_retries = 3
        for attempt in range(max_retries):
            try:
                logger.info(f"üì° Connecting to SMTP server {SMTP_SERVER}:{SMTP_PORT} (attempt {attempt + 1}/{max_retries})...")
                server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT, timeout=30)
                
                logger.info(f"üîí Starting TLS...")
                server.starttls()
                
                logger.info(f"üîë Logging in...")
                server.login(SMTP_USERNAME, SMTP_PASSWORD)
                
                logger.info(f"üì§ Sending email...")
                refused = server.sendmail(FROM_EMAIL, [to_email], msg.as_string())
                
                if refused:
                    logger.warning(f"‚ö†Ô∏è Some recipients were refused: {refused}")
                else:
                    logger.info(f"‚úÖ Email sent successfully to {to_email}")
                
                server.quit()
                return  # Success, exit retry loop
                
            except smtplib.SMTPException as smtp_error:
                logger.error(f"‚ùå SMTP error on attempt {attempt + 1}: {str(smtp_error)}")
                if attempt == max_retries - 1:
                    raise
                time.sleep(2 ** attempt)  # Exponential backoff
            except Exception as conn_error:
                logger.error(f"‚ùå Connection error on attempt {attempt + 1}: {str(conn_error)}")
                if attempt == max_retries - 1:
                    raise
                time.sleep(2 ** attempt)
                
    except Exception as e:
        logger.error(f"‚ùå Failed to send email to {to_email}: {str(e)}")
        import traceback
        logger.error(f"üìã Full traceback: {traceback.format_exc()}")
        # Print Vietnamese error message for debugging
        print(f"L·ªói kh√¥ng g·ª≠i email ƒë·∫øn {to_email}: {str(e)}")

def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security), db: Session = Depends(get_db)):
    try:
        token = credentials.credentials
        logger.info(f"üîç get_current_user: Processing token: {token[:20]}...")

        try:
            payload = jose_jwt.decode(token, JWT_SECRET_KEY, algorithms=[JWT_ALGORITHM])
        except JWTError as e:
            logger.error(f"üîç get_current_user: JWT Error: {str(e)}")
            logger.error(f"üîç get_current_user: Token that failed: {token}")
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail=f"Token expired or invalid: {str(e)}")

        logger.info(f"üîç get_current_user: Token decoded successfully. Payload: {payload}")

        jti = payload.get("jti")
        if jti:
            blacklisted = db.query(TokenBlacklist).filter(TokenBlacklist.token_jti == jti).first()
            if blacklisted:
                logger.warning(f"üîç get_current_user: Token is blacklisted: {jti}")
                raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Token has been blacklisted")

        if payload.get("type") != "access":
            logger.warning(f"üîç get_current_user: Invalid token type: {payload.get('type')}")
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail=f"Invalid token type: {payload.get('type')}")

        user_id = payload.get("sub")
        if user_id is None:
            logger.warning(f"üîç get_current_user: No user ID in token")
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid token: no user id")

        logger.info(f"üîç get_current_user: Looking for user with ID: {user_id}")
        user = db.query(User).filter(User.id == user_id).first()
        if not user:
            logger.warning(f"üîç get_current_user: User not found in database: {user_id}")
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="User not found")

        is_email_verified = getattr(user, 'is_email_verified', False)
        is_active = getattr(user, 'is_active', True)

        logger.info(f"üîç get_current_user: User {user.email} - email_verified: {is_email_verified}, active: {is_active}")

        if not is_email_verified:
            logger.warning(f"üîç get_current_user: Email not verified for user: {user.email}")
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Email not verified")

        if not is_active:
            logger.warning(f"üîç get_current_user: User account inactive: {user.email}")
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="User account is inactive")

        logger.info(f"üîç get_current_user: Authentication successful for user: {user.email}")
        return user

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"üîç get_current_user: Unexpected error: {str(e)}")
        import traceback
        logger.error(f"üîç get_current_user: Traceback: {traceback.format_exc()}")
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail=f"Invalid token: {str(e)}")

# Startup event
@app.on_event("startup")
async def startup_event():
    # Create tables
    create_tables()
    
    # Create default admin user
    from src.database import SessionLocal
    db = SessionLocal()
    try:
        admin = db.query(Admin).filter(Admin.username == ADMIN_USERNAME).first()
        if not admin:
            admin = Admin(
                username=ADMIN_USERNAME,
                password=hash_password(ADMIN_PASSWORD)
            )
            db.add(admin)
            db.commit()
            logger.info("Default admin user created")
    finally:
        db.close()

# Health endpoints
@app.get("/")
async def root():
    return {"message": "Auth Service is running"}

@app.get("/health")
async def health():
    return {"status": "healthy", "service": "auth-service"}

@app.get("/debug/config")
async def debug_config():
    """Debug endpoint to check configuration"""
    return {
        "FRONTEND_URL": FRONTEND_URL,
        "DATABASE_URL": DATABASE_URL[:50] + "..." if DATABASE_URL else None,  # Hide sensitive data
        "JWT_SECRET_KEY": JWT_SECRET_KEY[:10] + "..." if JWT_SECRET_KEY else None,
        "SMTP_USERNAME": SMTP_USERNAME,
        "EMAIL_VERIFICATION_EXPIRE_MINUTES": EMAIL_VERIFICATION_EXPIRE_MINUTES,
    }

# 1.1. ƒêƒÉng k√Ω
@app.post("/api/v1/signup", response_model=MessageResponse)
async def signup(user_data: SignupRequest, db: Session = Depends(get_db)):
    """User registration endpoint"""
    try:
        logger.info(f"Signup attempt for email: {user_data.email}")
        
        # Check if user already exists
        existing_user = db.query(User).filter(User.email == user_data.email).first()
        
        if existing_user:
            if getattr(existing_user, 'is_email_verified'):
                # User exists and is verified - REJECT signup
                logger.warning(f"Attempted signup with already verified email: {user_data.email}")
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail="Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng v√† ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c. Vui l√≤ng ƒëƒÉng nh·∫≠p ho·∫∑c s·ª≠ d·ª•ng email kh√°c."
                )
            else:
                # User exists but not verified - allow re-registration with new verification token
                logger.info(f"Re-registering unverified user: {user_data.email}")
                verification_token = generate_token()
                expire_minutes = EMAIL_VERIFICATION_EXPIRE_MINUTES
                expiration_time = datetime.now(timezone.utc) + timedelta(minutes=expire_minutes)
                
                setattr(existing_user, 'email_verification_token', verification_token)
                setattr(existing_user, 'email_verification_expires_at', expiration_time)
                setattr(existing_user, 'password', hash_password(user_data.password))  # Update password
                db.commit()
                
                # Send verification email with proper URL
                frontend_base = FRONTEND_URL.rstrip('/')
                if frontend_base == "*" or not frontend_base.startswith(('http://', 'https://')):
                    frontend_base = "http://localhost:3000"  # Default fallback
                
                verification_link = f"{frontend_base}/auth/verify-email?token={verification_token}"
                logger.info(f"Re-registration verification link: {verification_link}")
                
                email_body = f"""
                <html>
                <body>
                    <h2>X√°c th·ª±c t√†i kho·∫£n PathLight</h2>
                    <p>Ch√†o b·∫°n,</p>
                    <p>B·∫°n ƒë√£ ƒëƒÉng k√Ω l·∫°i t√†i kho·∫£n v·ªõi email n√†y!</p>
                    <p>Vui l√≤ng click v√†o n√∫t d∆∞·ªõi ƒë√¢y ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n c·ªßa b·∫°n:</p>
                    <p style="text-align: center; margin: 30px 0;">
                        <a href="{verification_link}" style="background-color: #ff6b35; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; font-weight: bold;">X√°c th·ª±c t√†i kho·∫£n</a>
                    </p>
                    <p>Ho·∫∑c copy v√† paste link sau v√†o tr√¨nh duy·ªát:</p>
                    <p style="word-break: break-all; color: #666;">{verification_link}</p>
                    <p style="color: #999; font-size: 12px;">Link n√†y s·∫Ω h·∫øt h·∫°n sau {expire_minutes} ph√∫t.</p>
                </body>
                </html>
                """
                
                send_email(user_data.email, "X√°c th·ª±c t√†i kho·∫£n (ƒêƒÉng k√Ω l·∫°i)", email_body)
                return MessageResponse(status=200, message="Email ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω tr∆∞·ªõc ƒë√≥ nh∆∞ng ch∆∞a x√°c th·ª±c. M√£ x√°c th·ª±c m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i v√†o email c·ªßa b·∫°n.")
        
        # Create new user (email doesn't exist)
        logger.info(f"Creating new user: {user_data.email}")
        verification_token = generate_token()
        expire_minutes = EMAIL_VERIFICATION_EXPIRE_MINUTES
        expiration_time = datetime.now(timezone.utc) + timedelta(minutes=expire_minutes)
        hashed_password = hash_password(user_data.password)
        
        user = User(
            email=user_data.email,
            password=hashed_password,
            email_verification_token=verification_token,
            email_verification_expires_at=expiration_time,
            is_email_verified=False
        )
        
        db.add(user)
        db.commit()
        
        # Send verification email with proper URL formatting
        frontend_base = FRONTEND_URL.rstrip('/')
        if frontend_base == "*" or not frontend_base.startswith(('http://', 'https://')):
            frontend_base = "http://localhost:3000"  # Default fallback
        
        verification_link = f"{frontend_base}/auth/verify-email?token={verification_token}"
        logger.info(f"Generated verification link: {verification_link}")
        
        email_body = f"""
        <html>
        <body>
            <h2>X√°c th·ª±c t√†i kho·∫£n PathLight</h2>
            <p>Ch√†o b·∫°n,</p>
            <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°i PathLight!</p>
            <p>Vui l√≤ng click v√†o n√∫t d∆∞·ªõi ƒë√¢y ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n c·ªßa b·∫°n:</p>
            <p style="text-align: center; margin: 30px 0;">
                <a href="{verification_link}" style="background-color: #ff6b35; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; font-weight: bold;">X√°c th·ª±c t√†i kho·∫£n</a>
            </p>
            <p>Ho·∫∑c copy v√† paste link sau v√†o tr√¨nh duy·ªát:</p>
            <p style="word-break: break-all; color: #666;">{verification_link}</p>
            <p style="color: #999; font-size: 12px;">Link n√†y s·∫Ω h·∫øt h·∫°n sau {expire_minutes} ph√∫t.</p>
        </body>
        </html>
        """
        
        send_email(user_data.email, "X√°c th·ª±c t√†i kho·∫£n PathLight", email_body)
        logger.info(f"Signup successful for email: {user_data.email}")
        
        return MessageResponse(status=200, message="M√£ x√°c th·ª±c ƒë√£ ƒë∆∞·ª£c g·ª≠i v√†o email c·ªßa b·∫°n, xin vui l√≤ng x√°c th·ª±c email c·ªßa b·∫°n")
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Signup error for {user_data.email}: {str(e)}")
        import traceback
        logger.error(f"Signup traceback: {traceback.format_exc()}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau"
        )

# 1.2. X√°c th·ª±c Email
@app.get("/api/v1/verify-email", response_model=AuthResponse)
async def verify_email(token: str, db: Session = Depends(get_db)):
    """Verify email endpoint"""
    user = db.query(User).filter(User.email_verification_token == token).first()
    if not user:
        return AuthResponse(
            status=401, 
            message="Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n",
            access_token=None
        )
    
    # Check if token has expired
    expiration_time = getattr(user, 'email_verification_expires_at')
    if expiration_time is not None and expiration_time < datetime.now(timezone.utc):
        return AuthResponse(
            status=401, 
            message="Token ƒë√£ h·∫øt h·∫°n. Vui l√≤ng y√™u c·∫ßu g·ª≠i l·∫°i email x√°c nh·∫≠n",
            access_token=None
        )
    
    # Update user as verified
    setattr(user, 'is_email_verified', True)
    setattr(user, 'email_verification_token', None)
    setattr(user, 'email_verification_expires_at', None)
    db.commit()
    
    # Generate JWT token for verified user
    access_token = create_access_token(data={"sub": user.id})
    
    logger.info(f"Email verified successfully for user: {user.email}")
    
    return AuthResponse(
        status=200,
        message="Email ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c th√†nh c√¥ng",
        access_token=access_token
    )

# 1.3. ƒêƒÉng nh·∫≠p
@app.post("/api/v1/signin", response_model=AuthResponse)
async def signin(user_data: SigninRequest, db: Session = Depends(get_db)):
    """User login endpoint"""
    try:
        logger.info(f"Login attempt for email: {user_data.email}")
        
        user = db.query(User).filter(User.email == user_data.email).first()
        if not user:
            logger.warning(f"Login failed: User not found for email {user_data.email}")
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng"
            )
        
        user_password = getattr(user, 'password')
        if not user_password or not verify_password(user_data.password, user_password):
            logger.warning(f"Login failed: Invalid password for email {user_data.email}")
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng"
            )
        
        if not getattr(user, 'is_email_verified'):
            logger.warning(f"Login failed: Email not verified for {user_data.email}")
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Email ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c"
            )
        
        # Create access token
        access_token = create_access_token(data={"sub": user.id})
        logger.info(f"Login successful for email: {user_data.email}")
        
        return AuthResponse(status=200, access_token=access_token)
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Login error for {user_data.email}: {str(e)}")
        import traceback
        logger.error(f"Signin traceback: {traceback.format_exc()}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau"
        )

# 1.4. ƒêƒÉng xu·∫•t
@app.get("/api/v1/signout", response_model=MessageResponse)
async def signout(credentials: HTTPAuthorizationCredentials = Depends(security), db: Session = Depends(get_db)):
    """User logout endpoint"""
    try:
        token = credentials.credentials
        payload = jose_jwt.decode(token, JWT_SECRET_KEY, algorithms=[JWT_ALGORITHM])
        jti = payload.get("jti")
        
        if jti:
            # Add token to blacklist
            blacklist_token = TokenBlacklist(token_jti=jti)
            db.add(blacklist_token)
            db.commit()
    except:
        pass
    
    return MessageResponse(status=200)

@app.post("/api/v1/forget-password", response_model=MessageResponse)
async def forget_password(request: ForgetPasswordRequest, db: Session = Depends(get_db)):
    """Forget password endpoint"""
    try:
        logger.info(f"Password reset requested for email: {request.email}")
        user = db.query(User).filter(User.email == request.email).first()
        
        if not user:
            # User doesn't exist
            logger.warning(f"Password reset requested for non-existent email: {request.email}")
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Email n√†y kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng"
            )
        
        # Check if user has a password (not OAuth-only)
        user_password = getattr(user, 'password')
        if not user_password:
            # User exists but is OAuth-only (no password to reset)
            logger.warning(f"Password reset requested for OAuth-only user: {request.email}")
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="T√†i kho·∫£n n√†y ƒëƒÉng nh·∫≠p b·∫±ng Google, kh√¥ng th·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u"
            )
        
        # User exists and has password - send reset email (regardless of email verification status)
        reset_token = generate_token()
        setattr(user, 'password_reset_token', reset_token)
        db.commit()
        
        # Send reset email with proper URL formatting
        frontend_base = FRONTEND_URL.rstrip('/')
        if frontend_base == "*" or not frontend_base.startswith(('http://', 'https://')):
            frontend_base = "http://localhost:3000"  # Default fallback
        
        reset_link = f"{frontend_base}/auth/reset-password/{reset_token}"
        logger.info(f"Generated reset password link: {reset_link}")
        
        email_body = f"""
        <html>
        <body>
            <h2>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u PathLight</h2>
            <p>Ch√†o b·∫°n,</p>
            <p>B·∫°n ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n PathLight c·ªßa m√¨nh.</p>
            <p>Vui l√≤ng click v√†o n√∫t d∆∞·ªõi ƒë√¢y ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:</p>
            <p style="text-align: center; margin: 30px 0;">
                <a href="{reset_link}" style="background-color: #ff6b35; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; font-weight: bold;">ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</a>
            </p>
            <p>Ho·∫∑c copy v√† paste link sau v√†o tr√¨nh duy·ªát:</p>
            <p style="word-break: break-all; color: #666;">{reset_link}</p>
            <p style="color: #999; font-size: 12px;">Link n√†y s·∫Ω h·∫øt h·∫°n sau 15 ph√∫t.</p>
            <p style="color: #999; font-size: 12px;">N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y.</p>
        </body>
        </html>
        """
        
        send_email(request.email, "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u PathLight", email_body)
        logger.info(f"Password reset email sent to {request.email}")
        
        return MessageResponse(status=200, message="Email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i. Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞ c·ªßa b·∫°n")
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Forget password error for {request.email}: {str(e)}")
        import traceback
        logger.error(f"Forget password traceback: {traceback.format_exc()}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau"
        )

# 1.5.1. Ki·ªÉm tra token reset password
@app.get("/api/v1/validate-reset-token/{token}", response_model=MessageResponse)
async def validate_reset_token(token: str, db: Session = Depends(get_db)):
    """Validate reset token endpoint"""
    user = db.query(User).filter(User.password_reset_token == token).first()
    
    if not user:
        # Token not found or invalid
        logger.warning(f"Token validation failed - invalid token: {token[:8]}...")
        return MessageResponse(status=401, message="Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n")
    
    user_password = getattr(user, 'password')
    if not user_password:
        # User exists but is OAuth-only (no password to reset)
        logger.warning(f"Token validation failed - OAuth-only user: {user.email}")
        return MessageResponse(status=400, message="T√†i kho·∫£n n√†y ƒëƒÉng nh·∫≠p b·∫±ng Google, kh√¥ng th·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u")
    
    if not getattr(user, 'is_active', True):
        # User exists but is inactive
        logger.warning(f"Token validation failed - inactive user: {user.email}")
        return MessageResponse(status=403, message="T√†i kho·∫£n n√†y ƒë√£ b·ªã v√¥ hi·ªáu h√≥a")
    
    logger.info(f"Token validation successful for user: {user.email}")
    return MessageResponse(status=200, message="Token h·ª£p l·ªá")

# 1.6. ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
@app.post("/api/v1/reset-password/{token}", response_model=MessageResponse)
async def reset_password(token: str, request: ResetPasswordRequest, db: Session = Depends(get_db)):
    """Reset password endpoint"""
    user = db.query(User).filter(User.password_reset_token == token).first()
    
    if not user:
        # Token not found or invalid
        logger.warning(f"Reset password attempted with invalid token: {token[:8]}...")
        return MessageResponse(status=401, message="Token ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá")
    
    user_password = getattr(user, 'password')
    if not user_password:
        # User exists but is OAuth-only (no password to reset)
        logger.warning(f"Reset password attempted for OAuth-only user: {user.email}")
        return MessageResponse(status=400, message="T√†i kho·∫£n n√†y ƒëƒÉng nh·∫≠p b·∫±ng Google, kh√¥ng th·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u")
    
    if not getattr(user, 'is_active', True):
        # User exists but is inactive
        logger.warning(f"Reset password attempted for inactive user: {user.email}")
        return MessageResponse(status=403, message="T√†i kho·∫£n n√†y ƒë√£ b·ªã v√¥ hi·ªáu h√≥a")
    
    # Check if new password is same as current password in database
    if verify_password(request.new_password, user_password):
        logger.warning(f"User {user.email} attempted to use same password during reset")
        return MessageResponse(status=409, message="M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c tr√πng v·ªõi m·∫≠t kh·∫©u c≈©")
    
    # Update password and clear reset token
    setattr(user, 'password', hash_password(request.new_password))
    setattr(user, 'password_reset_token', None)
    db.commit()
    
    logger.info(f"Password reset successful for user {user.email}")
    return MessageResponse(status=200, message="ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng")

# 1.7. ƒêƒÉng nh·∫≠p b·∫±ng t√†i kho·∫£n th·ª© ba (Google)
@app.post("/api/v1/oauth-signin", response_model=AuthResponse)
async def oauth_signin(request: OAuthSigninRequest, db: Session = Depends(get_db)):
    """OAuth signin endpoint (Google)"""
    try:
        user = db.query(User).filter(
            (User.email == request.email) | (User.google_id == request.google_id)
        ).first()
        
        if user:
            # Update user info
            setattr(user, 'google_id', request.google_id)
            setattr(user, 'given_name', request.given_name)
            setattr(user, 'family_name', request.family_name)
            setattr(user, 'avatar_url', request.avatar_id)
            setattr(user, 'is_email_verified', True)
            setattr(user, 'is_active', True)
        else:
            # Create new user
            user = User(
                email=request.email,
                google_id=request.google_id,
                given_name=request.given_name,
                family_name=request.family_name,
                avatar_url=request.avatar_id,
                is_email_verified=True,
                is_active=True
            )
            db.add(user)
        db.commit()
        access_token = create_access_token(data={"sub": user.id})
        return AuthResponse(status=200, access_token=access_token)
    except Exception as e:
        logger.error(f"OAuth signin error: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="C√≥ l·ªói x·∫£y ra, xin vui l√≤ng th·ª≠ l·∫°i"
        )

# 1.8. ƒê·ªïi m·∫≠t kh·∫©u
@app.post("/api/v1/user/change-password", response_model=MessageResponse)
async def change_password(
    request: ChangePasswordRequest,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """Change password endpoint"""
    # Check if user is OAuth user
    user_google_id = getattr(current_user, 'google_id')
    user_password = getattr(current_user, 'password')
    if user_google_id and not user_password:
        return MessageResponse(status=401, message="T√†i kho·∫£n n√†y l√† c·ªßa b√™n th·ª© ba, kh√¥ng th·ªÉ ƒë·ªïi m·∫≠t kh·∫©u")
    
    # Verify current password
    if not user_password or not verify_password(request.password, user_password):
        return MessageResponse(status=401, message="M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng")
    
    # Update password
    setattr(current_user, 'password', hash_password(request.new_password))
    db.commit()
    
    return MessageResponse(status=200)

# 1.8b. ƒê·∫∑t th·ªùi gian nh·∫Øc h·ªçc t·∫≠p
@app.put("/api/v1/user/notify-time", response_model=MessageResponse)
async def set_notify_time(
    request: NotifyTimeRequest,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """Set study reminder time for user"""
    try:
        logger.info(f"Setting notify time for user {current_user.email}: {request.remind_time}")
        # Always allow setting/updating remind_time
        setattr(current_user, 'remind_time', request.remind_time)
        db.commit()
        logger.info(f"Successfully set remind time for user {current_user.email} to {request.remind_time}")
        return MessageResponse(
            status=200, 
            message="ƒê√£ ƒë·∫∑t l·ªãch th√†nh c√¥ng"
        )
    except Exception as e:
        logger.error(f"Failed to set remind time for user {getattr(current_user, 'email', 'unknown')}: {str(e)}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        db.rollback()
        return MessageResponse(
            status=500, 
            message="C√≥ l·ªói x·∫£y ra, xin vui l√≤ng th·ª≠ l·∫°i"
        )

# 1.8d. Get users with reminder settings (for admin checking)
@app.get("/api/v1/admin/users-with-reminders")
async def get_users_with_reminders(db: Session = Depends(get_db)):
    """Get list of users who have set reminder times"""
    try:
        users = db.query(User).filter(
            User.remind_time.isnot(None),
            User.is_email_verified == True,
            User.is_active == True
        ).all()
        
        result = []
        for user in users:
            created_at_value = getattr(user, 'created_at', None)
            result.append({
                "id": getattr(user, 'id', ''),
                "email": getattr(user, 'email', ''),
                "remind_time": getattr(user, 'remind_time', ''),
                "given_name": getattr(user, 'given_name', ''),
                "family_name": getattr(user, 'family_name', ''),
                "created_at": created_at_value.isoformat() if created_at_value else None
            })
        
        return {
            "status": "success",
            "total_users": len(result),
            "users": result
        }
    except Exception as e:
        logger.error(f"Error getting users with reminders: {str(e)}")
        return {
            "status": "error",
            "message": f"Failed to get users: {str(e)}"
        }

# 1.9. ƒêƒÉng nh·∫≠p cho ADMIN
@app.post("/api/v1/admin/signin", response_model=AuthResponse)
async def admin_signin(request: AdminSigninRequest, db: Session = Depends(get_db)):
    """Admin login endpoint"""
    admin = db.query(Admin).filter(Admin.username == request.username).first()
    if not admin:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng"
        )
    
    admin_password = getattr(admin, 'password')
    if not verify_password(request.password, admin_password):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng"
        )
    
    # Create access token with admin role
    access_token = create_access_token(data={"sub": admin.id, "role": "admin"})
    
    return AuthResponse(status=200, access_token=access_token)

# 1.2. G·ª≠i l·∫°i email x√°c th·ª±c
@app.post("/api/v1/resend-verification", response_model=MessageResponse)
async def resend_verification(request: ResendVerificationRequest, db: Session = Depends(get_db)):
    """Resend verification email endpoint"""
    user = db.query(User).filter(User.email == request.email).first()
    if not user:
        return MessageResponse(status=400, message="Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng")
    
    if user.is_email_verified is True:
        return MessageResponse(status=400, message="Email n√†y ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c")
    
    # Generate new verification token
    verification_token = generate_token()
    expire_minutes = EMAIL_VERIFICATION_EXPIRE_MINUTES
    expiration_time = datetime.now(timezone.utc) + timedelta(minutes=expire_minutes)
    
    setattr(user, 'email_verification_token', verification_token)
    setattr(user, 'email_verification_expires_at', expiration_time)
    db.commit()
    
    # Send verification email
    verification_link = f"{FRONTEND_URL}/auth/verify-email?token={verification_token}"
    email_body = f"""
    <html>
    <body>
        <h2>X√°c th·ª±c t√†i kho·∫£n PathLight</h2>
        <p>Ch√†o b·∫°n,</p>
        <p>B·∫°n ƒë√£ y√™u c·∫ßu g·ª≠i l·∫°i email x√°c th·ª±c!</p>
        <p>Vui l√≤ng click v√†o n√∫t d∆∞·ªõi ƒë√¢y ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n c·ªßa b·∫°n:</p>
        <p style="text-align: start; margin: 30px 0;">
            <a href="{verification_link}" style="background-color: #ff6b35; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; font-weight: bold;">X√°c th·ª±c t√†i kho·∫£n</a>
        </p>
        <p>Ho·∫∑c copy v√† paste link sau v√†o tr√¨nh duy·ªát:</p>
        <p style="word-break: break-all; color: #666;">{verification_link}</p>
        <p style="color: #999; font-size: 12px;">Link n√†y s·∫Ω h·∫øt h·∫°n sau 24 gi·ªù.</p>
    </body>
    </html>
    """
    
    send_email(request.email, "X√°c th·ª±c t√†i kho·∫£n (G·ª≠i l·∫°i)", email_body)
    
    return MessageResponse(status=200, message="Email x√°c th·ª±c ƒë√£ ƒë∆∞·ª£c g·ª≠i l·∫°i. Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞ c·ªßa b·∫°n")

# 1.8e. L·∫•y th√¥ng tin profile user (bao g·ªìm remind_time)
@app.get("/api/v1/user/profile")
async def get_user_profile(current_user: User = Depends(get_current_user)):
    """Get current user's profile info including remind_time"""
    return {
        "id": getattr(current_user, 'id', None),
        "email": getattr(current_user, 'email', None),
        "name": getattr(current_user, 'given_name', None) or getattr(current_user, 'email', None),
        "avatar_url": getattr(current_user, 'avatar_url', None),
        "remind_time": getattr(current_user, 'remind_time', None),
        "total_courses": getattr(current_user, 'total_courses', None),
        "completed_courses": getattr(current_user, 'completed_courses', None),
        "total_quizzes": getattr(current_user, 'total_quizzes', None),
        "average_score": getattr(current_user, 'average_score', None),
        "study_streak": getattr(current_user, 'study_streak', None),
        "total_study_time": getattr(current_user, 'total_study_time', None),
        "is_email_verified": getattr(current_user, 'is_email_verified', None),
        "is_active": getattr(current_user, 'is_active', None)
    }

# TEST ONLY: Trigger study reminder email for a specific email (for manual testing)
# @app.post("/api/v1/test/send-reminder/{email}")
# async def test_send_reminder(email: str, db: Session = Depends(get_db)):
#     user = db.query(User).filter(User.email == email).first()
#     if not user:
#         return {"status": "error", "message": f"User {email} not found"}
#     if not getattr(user, 'is_email_verified', False) or not getattr(user, 'is_active', False):
#         return {"status": "error", "message": f"User {email} is not active or not verified"}
#     # G·ª≠i email nh·∫Øc nh·ªü h·ªçc t·∫≠p
#     user_email = getattr(user, 'email', None)
#     remind_time = getattr(user, 'remind_time', None) or "(ch∆∞a ƒë·∫∑t)"
#     given_name = getattr(user, 'given_name', user_email)
#     send_email(
#         str(user_email),
#         "[Test] Nh·∫Øc nh·ªü h·ªçc t·∫≠p PathLight",
#         f"Ch√†o {given_name}, ƒë√¢y l√† email test nh·∫Øc nh·ªü h·ªçc t·∫≠p c·ªßa b·∫°n! Th·ªùi gian nh·∫Øc: {remind_time}"
#     )
#     return {"status": "success", "message": f"ƒê√£ g·ª≠i email test nh·∫Øc nh·ªü cho {user_email}"}

# TEST ONLY: ƒê·ªïi remind_time cho user b·∫±ng API (d√πng cho ki·ªÉm th·ª≠ t·ª± ƒë·ªông)
@app.post("/api/v1/test/set-remind-time/{email}/{remind_time}")
async def test_set_remind_time(email: str, remind_time: str, db: Session = Depends(get_db)):
    user = db.query(User).filter(User.email == email).first()
    if not user:
        return {"status": "error", "message": f"User {email} not found"}
    setattr(user, 'remind_time', remind_time)
    db.commit()
    return {"status": "success", "message": f"ƒê√£ ƒë·ªïi remind_time c·ªßa {email} th√†nh {remind_time}"}
