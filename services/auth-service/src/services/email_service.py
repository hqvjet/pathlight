import smtplib
import secrets
import time
import logging
from datetime import datetime
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

from ..config import config

logger = logging.getLogger(__name__)

# Email configuration
SMTP_SERVER = config.SMTP_SERVER
SMTP_PORT = config.SMTP_PORT
SMTP_USERNAME = config.SMTP_USERNAME
SMTP_PASSWORD = config.SMTP_PASSWORD
FROM_EMAIL = config.FROM_EMAIL
FRONTEND_URL = config.FRONTEND_URL

def send_email(to_email: str, subject: str, body: str):
    """Send email using SMTP with improved reliability"""
    try:
        logger.info(f"üîç DEBUG: Attempting to send email to {to_email}")
        logger.info(f"üîç DEBUG: SMTP_USERNAME={SMTP_USERNAME}")
        logger.info(f"üîç DEBUG: SMTP_PASSWORD={'*' * len(SMTP_PASSWORD) if SMTP_PASSWORD else 'EMPTY'}")
        logger.info(f"üîç DEBUG: FROM_EMAIL={FROM_EMAIL}")
        logger.info(f"üîç DEBUG: SMTP_SERVER={SMTP_SERVER}:{SMTP_PORT}")
        
        if not SMTP_USERNAME or not SMTP_PASSWORD:
            logger.warning("Email credentials not configured. Skipping email send.")
            return
            
        logger.info(f"üìß Creating email message...")
        msg = MIMEMultipart('alternative')
        msg['From'] = f"PathLight <{FROM_EMAIL}>"
        msg['To'] = to_email
        msg['Subject'] = subject
        msg['Message-ID'] = f"<{secrets.token_urlsafe(16)}@pathlight.com>"
        msg['Date'] = datetime.now().strftime('%a, %d %b %Y %H:%M:%S %z')
        msg['X-Mailer'] = 'PathLight App'
        
        plain_body = body.replace('<br>', '\n').replace('<p>', '').replace('</p>', '\n')
        plain_body = plain_body.replace('<strong>', '').replace('</strong>', '')
        plain_body = plain_body.replace('<a href="', '').replace('">', ' ').replace('</a>', '')
        
        text_part = MIMEText(plain_body, 'plain', 'utf-8')
        html_part = MIMEText(body, 'html', 'utf-8')
        
        msg.attach(text_part)
        msg.attach(html_part)
        
        max_retries = 3
        for attempt in range(max_retries):
            try:
                logger.info(f"üì° Connecting to SMTP server {SMTP_SERVER}:{SMTP_PORT} (attempt {attempt + 1}/{max_retries})...")
                server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT, timeout=30)
                
                logger.info(f"üîí Starting TLS...")
                server.starttls()
                
                logger.info(f"üîë Logging in...")
                server.login(SMTP_USERNAME, SMTP_PASSWORD)
                
                logger.info(f"üì§ Sending email...")
                refused = server.sendmail(FROM_EMAIL, [to_email], msg.as_string())
                
                if refused:
                    logger.warning(f"‚ö†Ô∏è Some recipients were refused: {refused}")
                else:
                    logger.info(f"‚úÖ Email sent successfully to {to_email}")
                
                server.quit()
                return
                
            except smtplib.SMTPException as smtp_error:
                logger.error(f"‚ùå SMTP error on attempt {attempt + 1}: {str(smtp_error)}")
                if attempt == max_retries - 1:
                    raise
                time.sleep(2 ** attempt)
            except Exception as conn_error:
                logger.error(f"‚ùå Connection error on attempt {attempt + 1}: {str(conn_error)}")
                if attempt == max_retries - 1:
                    raise
                time.sleep(2 ** attempt)
                
    except Exception as e:
        logger.error(f"‚ùå Failed to send email to {to_email}: {str(e)}")
        import traceback
        logger.error(f"üìã Full traceback: {traceback.format_exc()}")
        print(f"L·ªói kh√¥ng g·ª≠i email ƒë·∫øn {to_email}: {str(e)}")

def send_verification_email(email: str, token: str, expire_minutes: int):
    """Send email verification email"""
    frontend_base = FRONTEND_URL.rstrip('/')
    if frontend_base == "*" or not frontend_base.startswith(('http://', 'https://')):
        frontend_base = "http://localhost:3000"
    
    verification_link = f"{frontend_base}/auth/verify-email?token={token}"
    
    email_body = f"""
    <html>
    <body>
        <h2>X√°c th·ª±c t√†i kho·∫£n PathLight</h2>
        <p>Ch√†o b·∫°n,</p>
        <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°i PathLight!</p>
        <p>Vui l√≤ng click v√†o n√∫t d∆∞·ªõi ƒë√¢y ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n c·ªßa b·∫°n:</p>
        <p style="text-align: center; margin: 30px 0;">
            <a href="{verification_link}" style="background-color: #ff6b35; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; font-weight: bold;">X√°c th·ª±c t√†i kho·∫£n</a>
        </p>
        <p>Ho·∫∑c copy v√† paste link sau v√†o tr√¨nh duy·ªát:</p>
        <p style="word-break: break-all; color: #666;">{verification_link}</p>
        <p style="color: #999; font-size: 12px;">Link n√†y s·∫Ω h·∫øt h·∫°n sau {expire_minutes} ph√∫t.</p>
    </body>
    </html>
    """
    
    send_email(email, "X√°c th·ª±c t√†i kho·∫£n PathLight", email_body)

def send_password_reset_email(email: str, token: str):
    """Send password reset email"""
    frontend_base = FRONTEND_URL.rstrip('/')
    if frontend_base == "*" or not frontend_base.startswith(('http://', 'https://')):
        frontend_base = "http://localhost:3000"
    
    reset_link = f"{frontend_base}/auth/reset-password/{token}"
    
    email_body = f"""
    <html>
    <body>
        <h2>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u PathLight</h2>
        <p>Ch√†o b·∫°n,</p>
        <p>B·∫°n ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n PathLight c·ªßa m√¨nh.</p>
        <p>Vui l√≤ng click v√†o n√∫t d∆∞·ªõi ƒë√¢y ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:</p>
        <p style="text-align: center; margin: 30px 0;">
            <a href="{reset_link}" style="background-color: #ff6b35; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; font-weight: bold;">ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</a>
        </p>
        <p>Ho·∫∑c copy v√† paste link sau v√†o tr√¨nh duy·ªát:</p>
        <p style="word-break: break-all; color: #666;">{reset_link}</p>
        <p style="color: #999; font-size: 12px;">Link n√†y s·∫Ω h·∫øt h·∫°n sau 15 ph√∫t.</p>
        <p style="color: #999; font-size: 12px;">N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y.</p>
    </body>
    </html>
    """
    
    send_email(email, "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u PathLight", email_body)
